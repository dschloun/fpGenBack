openapi: 3.0.0
info:
  version: "2.2.0"
  title: 'Afelio HR API'
  description: 'Afelio HR API'

tags:
  - name: Job
  - name: Application
  - name: Candidate
  - name: Evaluation
  - name: Profile
  - name: DataUsageCondition
  - name: RecruitmentChannel
  - name: Resume
  - name: Private

paths:
  /applications/search:
    post:
      tags:
        - Application
      summary: "Search applications"
      description: |
        Search applications
      operationId: searchApplications
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationQuery'
      responses:
        200:
          description: 'Applications successfully retrieved'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Application'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

  #############################################################################################################
  #search applications with pagination
  #############################################################################################################
  /applications/search-pagination:
    post:
      tags:
        - Application
      summary: "Search applications with pagination"
      description: |
        Search applications with pagination
      operationId: searchApplicationsPaginate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PagedApplicationQuery'
      responses:
        200:
          description: 'The requested page that matches the given query'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationsPage'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

  #############################################################################################################
  #############################################################################################################

  /applications/{applicationId}:
    parameters:
      - $ref: '#/components/parameters/applicationId'
    get:
      tags:
        - Application
      summary: "Get application by Id"
      description: |
        Get application by Id
      operationId: getApplicationById
      responses:
        200:
          description: 'Application successfully retrieved'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

    delete:
      tags:
        - Application
      summary: "Delete Application"
      description: |
        Delete application
      operationId: deleteApplication
      responses:
        204:
          description: 'Application successfully deleted'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

    put:
      tags:
        - Application
      summary: "Update Application"
      description: |
        Update application
      operationId: updateApplication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationUpdate'
      responses:
        204:
          description: 'Application successfully updated'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

  /applications/{applicationId}/status:
    parameters:
      - $ref: '#/components/parameters/applicationId'
    put:
      tags:
        - Application
      summary: "Update application status"
      description: |
        Update application status
      operationId: updateApplicationStatus
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationStatus'
      responses:
        201:
          description: 'Application status successfully updated'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

  /applications/{applicationId}/evaluations:
    parameters:
      - $ref: '#/components/parameters/applicationId'
    post:
      tags:
        - Evaluation
      summary: "Add an evaluation"
      description: |
        Add an evaluation for the application
      operationId: addEvaluation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EvaluationCreation'
      responses:
        201:
          description: 'Application successfully registered'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'
    get:
      tags:
        - Evaluation
      summary: "Get evaluations on an application"
      description: |
        Get evaluations by application
      operationId: getEvaluationByApplication
      responses:
        200:
          description: 'Evaluations retrieved successfully'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Evaluation'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

  #For the recruiter:
  ##################
  /candidates:
    post:
      tags:
        - Candidate
      summary: "Add a candidate and an application manually"
      description: |
        Add a candidate manually
      operationId: addCandidateAndApplication
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/HRApplicationCreationWrapper'
      responses:
        201:
          description: 'Candidate and Application successfully registered'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Candidate'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

  #############################################################################################################
  #essai search candidate with pagination
  #############################################################################################################
  /candidates/search:
    post:
      tags:
        - Candidate
      summary: "Search candidates with pagination"
      description: |
        Search candidates with pagination
      operationId: searchCandidatesPaginate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PagedCandidateQuery'
      responses:
        200:
          description: 'The requested page that matches the given query'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CandidatesPage'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

  /candidates/emails:
    post:
      tags:
        - Candidate
      summary: "Check candidate already exist"
      description: |
        Check if candidate already exist
      operationId: checkCandidateExist
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailVerification'
      responses:
        200:
          description: 'The candidate already exist'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailVerificationResponse'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

  #############################################################################################################
  #############################################################################################################
  /candidates/{candidateId}:
    parameters:
      - $ref: '#/components/parameters/candidateId'
    put:
      tags:
        - Candidate
      summary: "Update candidate"
      description: |
        Update a candidate
      operationId: updateCandidate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HrCandidateUpdate'
      responses:
        201:
          description: 'Candidate successfully updated'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

    delete:
      tags:
        - Candidate
      summary: "Delete candidate"
      description: |
        Delete a candidate
      operationId: deleteCandidate
      responses:
        204:
          description: 'Candidate successfully delete'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

    get:
      tags:
        - Candidate
      summary: "Get candidate by Id"
      description: |
        Get candidate by Id
      operationId: getCandidateById
      responses:
        200:
          description: 'Candidate successfully retrieved'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Candidate'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

  /candidates/{candidateId}/applications:
    parameters:
      - $ref: '#/components/parameters/candidateId'
    get:
      tags:
        - Application
      summary: "Get applications by candidate"
      description: |
        Get applications by candidate
      operationId: getApplicationByCandidate
      responses:
        200:
          description: 'Applications retrieved successfully'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Application'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'
    post:
      tags:
        - Application
      summary: "Add an application on an existing candidate"
      description: |
        Add an application for a candidate
      operationId: addApplication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HrApplicationCreation'
      responses:
        201:
          description: 'Application successfully registered'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

  /candidates/{candidateId}/profiles:
    parameters:
      - $ref: '#/components/parameters/candidateId'
    get:
      tags:
        - Profile
      summary: "Get candidate profiles"
      description: |
        Get all candidate's profiles
      operationId: getCandidateProfiles
      responses:
        200:
          description: 'Profiles retrieved successfully'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Profile'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

  /candidates/{candidateId}/evaluations:
    parameters:
      - $ref: '#/components/parameters/candidateId'
    get:
      tags:
        - Evaluation
      summary: "Get candidate evaluations"
      description: |
        Get all candidate's evaluations
      operationId: getCandidateEvaluations
      responses:
        200:
          description: 'Evaluations retrieved successfully'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Evaluation'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

  /profiles:
    post:
      tags:
        - Profile
      summary: "Create a profile"
      description: |
        Create a profile for the candidate
      operationId: createProfile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfileCreation'
      responses:
        201:
          description: 'Profile successfully registered'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

  /profiles/{profileId}:
    parameters:
      - $ref: '#/components/parameters/profileId'
    delete:
      tags:
        - Profile
      summary: "Delete a profile"
      description: |
        Delete the profile from a candidate
      operationId: deleteProfile
      responses:
        204:
          description: 'Profile successfully deleted'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

    put:
      tags:
        - Profile
      summary: "Update a profile"
      description: |
        Update the candidate profile
      operationId: updateProfile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfileUpdate'
      responses:
        204:
          description: 'Profile successfully updated'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

  /evaluations/{evaluationId}:
    parameters:
      - $ref: '#/components/parameters/evaluationId'
    put:
      tags:
        - Evaluation
      summary: "Update an evaluation"
      description: |
        Update an evaluation
      operationId: updateEvaluation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EvaluationUpdate'
      responses:
        204:
          description: 'Evaluation successfully updated'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'
    delete:
      tags:
        - Evaluation
      summary: "Delete an evaluation"
      description: |
        Delete an evaluation
      operationId: deleteEvaluation
      responses:
        204:
          description: 'Evaluation successfully deleted'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

  #For the technical evaluator:
  #############################
  /evaluations:
    parameters:
      - $ref: '#/components/parameters/evaluatorId'
    get:
      tags:
        - Evaluation
      summary: "Get pending evaluations of a evaluator"
      description: |
        Get pending evaluations of a evaluator
        All evaluations that are already completed won't be returned
      operationId: getEvaluationsByEvaluator
      responses:
        200:
          description: 'The list of all evaluations to complete'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Evaluation'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

  #For the job:
  #############
  /jobs:
    get:
      tags:
        - Job
      summary: "Get all jobs"
      description: |
        Get all jobs
      operationId: getAllJobs
      responses:
        200:
          description: 'The list of all jobs'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Job'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

  #domain
  /domains:
    parameters:
      - $ref: '#/components/parameters/categoryId'
    get:
      tags:
        - Profile
      summary: "Get domains filtered or not by category"
      description: |
        Get domains filtered or not by category
      operationId: getDomains
      responses:
        200:
          description: 'The list of domains'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Domain'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

  #category
  /categories:
    parameters:
      - $ref: '#/components/parameters/domainId'
    get:
      tags:
        - Profile
      summary: "Get categories filtered or not by domain"
      description: |
        Get categories filtered or not by domain
      operationId: getCategories
      responses:
        200:
          description: 'The list of categories'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

  ###############################################################################################################
  #Resume
  ###############################################################################################################
  /candidates/{candidateId}/resume-metadata:
    parameters:
      - $ref: '#/components/parameters/candidateId'
    get:
      tags:
        - Resume
      summary: "Get candidate resume metadata"
      description: |
        Get candidate resume metadata
      operationId: getCandidateResumeMetadata
      responses:
        '200':
          description: 'Resume metadata retrieved successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metadata'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

  /candidates/{candidateId}/resume:
    parameters:
      - $ref: '#/components/parameters/candidateId'
    get:
      tags:
        - Resume
      summary: "Download candidate resume"
      description: |
        Download candidate resume
      operationId: downloadCandidateResume
      responses:
        '200':
          description: 'Resume downloaded successfully'
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

  /applications/{applicationId}/resume:
    parameters:
      - $ref: '#/components/parameters/applicationId'
    post:
      tags:
        - Resume
      summary: "Add resume"
      description: |
        Add resume
      operationId: addResume
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/HRApplicationCreationWrapper'
      responses:
        201:
          description: 'Resume successfully registered'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

  /private/jobs:
    post:
      tags:
        - Private
      summary: "add a new job"
      description: |
        Add a new Job
      operationId: addJob
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobCreation'
      responses:
        201:
          description: 'Job successfully created'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

    put:
      tags:
        - Private
      summary: "update job"
      description: |
        Update Job
      operationId: updateJob
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobUpdate'
      responses:
        201:
          description: 'Job successfully updated'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

  /private/data-usage-conditions:
    get:
      tags:
        - Private
      summary: "Get the latest version of data usage conditions"
      description: |
        Get dataUsageCondition
      operationId: getDataUsageCondition
      responses:
        200:
          description: 'Data usage condition retrieved successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataUsageCondition'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

  /private/applications:
    post:
      tags:
        - Private
      summary: "Apply for a job"
      description: |
        Apply for a job
      operationId: applyForAJob
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ApplicationCreationWrapper'
      responses:
        201:
          description: 'Application successfully registered'
        400:
          $ref: 'common.yaml#/components/responses/400'
        403:
          $ref: 'common.yaml#/components/responses/403'
        404:
          $ref: 'common.yaml#/components/responses/404'
        500:
          $ref: 'common.yaml#/components/responses/500'

#parameters
##############
components:
  parameters:
    jobId:
      name: jobId
      in: path
      required: true
      schema:
        $ref: 'common.yaml#/components/schemas/UUID'

    applicationId:
      name: applicationId
      in: path
      required: true
      schema:
        $ref: 'common.yaml#/components/schemas/UUID'

    candidateId:
      name: candidateId
      in: path
      required: true
      schema:
        $ref: 'common.yaml#/components/schemas/UUID'

    evaluatorId:
      name: evaluatorId
      in: query
      required: true
      schema:
        $ref: 'common.yaml#/components/schemas/UUID'

    domainId:
      name: domainId
      in: query
      required: false
      schema:
        $ref: 'common.yaml#/components/schemas/UUID'

    categoryId:
      name: categoryId
      in: query
      required: false
      schema:
        $ref: 'common.yaml#/components/schemas/UUID'

    evaluationId:
      name: evaluationId
      in: path
      required: true
      schema:
        $ref: 'common.yaml#/components/schemas/UUID'

    statusId:
      name: statusId
      in: path
      required: true
      schema:
        $ref: 'common.yaml#/components/schemas/UUID'

    profileId:
      name: profileId
      in: path
      required: true
      schema:
        $ref: 'common.yaml#/components/schemas/UUID'

  schemas:
    #Application
    Application:
      type: object
      properties:
        id:
          $ref: 'common.yaml#/components/schemas/UUID'
        date:
          $ref: 'common.yaml#/components/schemas/Date'
        job:
          $ref: '#/components/schemas/Job'
        candidate:
          $ref: '#/components/schemas/Candidate'
        workplaces:
          type: array
          items:
            $ref: '#/components/schemas/Workplace'
        repository:
          type: string
        website:
          type: string
        applicationStatus:
          $ref: '#/components/schemas/ApplicationStatus'
        stopStatus:
          $ref: '#/components/schemas/StopStatus'
        recruitmentChannel:
          $ref: '#/components/schemas/RecruitmentChannel'

    ApplicationUpdate:
      type: object
      properties:
        jobId:
          $ref: 'common.yaml#/components/schemas/UUID'
        applicationStatus:
          $ref: '#/components/schemas/ApplicationStatus'
        stopStatus:
          $ref: '#/components/schemas/StopStatus'
        startDate:
          $ref: 'common.yaml#/components/schemas/Date'
        repository:
          type: string
        webSite:
          type: string
        workplaces:
          type: array
          items:
            $ref: '#/components/schemas/Workplace'
        recruitmentChannel:
          $ref: '#/components/schemas/RecruitmentChannel'


    #use to lake progress the application in the Candidate course
    ApplicationCard:
      type: object
      properties:
        applicationId:
          $ref: 'common.yaml#/components/schemas/UUID'
        applicationStatus:
          $ref: '#/components/schemas/ApplicationStatus'
        jobName:
          type: string
        candidateId:
          $ref: 'common.yaml#/components/schemas/UUID'
        lastName:
          type: string
        firstName:
          type: string
        date:
          $ref: 'common.yaml#/components/schemas/Date'
        startDate:
          $ref: 'common.yaml#/components/schemas/Date'

    #when a candidate apply from the website
    ApplicationCreation:
      type: object
      properties:
        jobUrl:
          type: string
        lastName:
          type: string
        firstName:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
        repository:
          type: string
        webSite:
          type: string
        workplaces:
          type: array
          items:
            $ref: '#/components/schemas/Workplace'
        dataUsageConditionVersionAccepted:
          $ref: 'common.yaml#/components/schemas/UUID'

    #when HR add a candidate and an application at the same time (let's see if it's really useful => yes they want that)
    HrCandidateAndApplicationCreation:
      type: object
      properties:
        jobUrl:
          type: string
        lastName:
          type: string
        firstName:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
        repository:
          type: string
        webSite:
          type: string
        workplaces:
          type: array
          items:
            $ref: '#/components/schemas/Workplace'
        recruitmentChannel:
          $ref: '#/components/schemas/RecruitmentChannel'
        profiles:
          type: array
          items:
            $ref: '#/components/schemas/ProfileCreation'
        confirmSendEmail:
          type: boolean

    ApplicationCreationWrapper:
      type: object
      required:
        - file
        - application
        - metadata
      properties:
        file:
          type: string
          format: binary
        application:
          $ref: '#/components/schemas/ApplicationCreation'
        metadata:
          type: array
          items:
            $ref: '#/components/schemas/Metadata'

    HRApplicationCreationWrapper:
      type: object
      properties:
        file:
          type: string
          format: binary
        application:
          $ref: '#/components/schemas/HrCandidateAndApplicationCreation'
        metadata:
          type: array
          items:
            $ref: '#/components/schemas/Metadata'

    #Job
    Job:
      type: object
      properties:
        id:
          $ref: 'common.yaml#/components/schemas/UUID'
        url:
          type: string
        code:
          type: string
        name:
          type: string

    JobCreation:
      type: object
      properties:
        url:
          type: string
        code:
          type: string
        name:
          type: string

    JobUpdate:
      type: object
      properties:
        formerUrl:
          type: string
        newUrl:
          type: string
        code:
          type: string
        name:
          type: string

    Workplace:
      type: string
      enum:
        - LIEGE
        - CHARLEROI

    Contract:
      type: string
      enum:
        - INTERNAL
        - EXTERNAL

    #Candidate
    Candidate:
      type: object
      properties:
        id:
          $ref: 'common.yaml#/components/schemas/UUID'
        lastName:
          type: string
        firstName:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
        applications:
          type: array
          items:
            $ref: '#/components/schemas/Application'
        profiles:
          type: array
          items:
            $ref: '#/components/schemas/Profile'
        isHired:
          type: boolean
        bum:
          type: string
        project:
          type: string
        contract:
          $ref: '#/components/schemas/Contract'
        startDate:
          $ref: 'common.yaml#/components/schemas/Date'

    CandidateDetails:
      type: object
      properties:
        id:
          $ref: 'common.yaml#/components/schemas/UUID'
        lastName:
          type: string
        firstName:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
        applications:
          $ref: '#/components/schemas/Application'
        profiles:
          type: array
          items:
            $ref: '#/components/schemas/Profile'

    CandidateForEvaluator:
      type: object
      required:
        - file
      properties:
        lastName:
          type: string
        firstName:
          type: string
        file:
          type: string
          format: binary

    HrCandidateUpdate:
      type: object
      properties:
        lastName:
          type: string
        firstName:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
        isHired:
          type: boolean
        bum:
          type: string
        project:
          type: string
        contract:
          $ref: '#/components/schemas/Contract'
        startDate:
          $ref: 'common.yaml#/components/schemas/Date'
        job:
          $ref: '#/components/schemas/Job'

    #add an application on an existing candidate
    HrApplicationCreation:
      type: object
      properties:
        jobId:
          $ref: 'common.yaml#/components/schemas/UUID'

    #Profile
    Profile:
      type: object
      properties:
        id:
          $ref: 'common.yaml#/components/schemas/UUID'
        domain:
          $ref: '#/components/schemas/Domain'
        category:
          $ref: '#/components/schemas/Category'
        seniority:
          $ref: '#/components/schemas/Seniority'

    ProfileCreation:
      type: object
      properties:
        candidateId:
          $ref: 'common.yaml#/components/schemas/UUID'
        domainId:
          $ref: 'common.yaml#/components/schemas/UUID'
        categoryId:
          $ref: 'common.yaml#/components/schemas/UUID'
        seniority:
          $ref: '#/components/schemas/Seniority'

    ProfileUpdate:
      type: object
      properties:
        domainId:
          $ref: 'common.yaml#/components/schemas/UUID'
        categoryId:
          $ref: 'common.yaml#/components/schemas/UUID'
        seniority:
          $ref: '#/components/schemas/Seniority'

    #Element of the profile
    Domain:
      type: object
      properties:
        id:
          $ref: 'common.yaml#/components/schemas/UUID'
        name:
          type: string

    DomainQuery:
      type: object
      properties:
        domainId:
          $ref: 'common.yaml#/components/schemas/UUID'
        categoryId:
          $ref: 'common.yaml#/components/schemas/UUID'

    Category:
      type: object
      properties:
        id:
          $ref: 'common.yaml#/components/schemas/UUID'
        name:
          type: string

    CategoryQuery:
      type: object
      properties:
        domainId:
          $ref: 'common.yaml#/components/schemas/UUID'
        categoryId:
          $ref: 'common.yaml#/components/schemas/UUID'

    Seniority:
      type: string
      nullable: true
      enum:
        - JUNIOR
        - MEDIOR
        - SENIOR
        - UNKNOWN

    #Evaluation
    Evaluation:
      type: object
      properties:
        id:
          $ref: 'common.yaml#/components/schemas/UUID'
        evaluator:
          type: string
        job:
          type: string
        date:
          $ref: 'common.yaml#/components/schemas/Date'
        comment:
          type: string

    EvaluationCreation:
      type: object
      properties:
        evaluator:
          type: string
        date:
          $ref: 'common.yaml#/components/schemas/Date'
        comment:
          type: string

    EvaluationUpdate:
      type: object
      properties:
        evaluationId:
          $ref: 'common.yaml#/components/schemas/UUID'
        evaluator:
          type: string
        date:
          $ref: 'common.yaml#/components/schemas/Date'
        comment:
          type: string

    EmailVerification:
      type: object
      properties:
        email:
          type: string

    EmailVerificationResponse:
      type: object
      properties:
        candidateId:
          $ref: 'common.yaml#/components/schemas/UUID'

    #Status
    ApplicationStatus:
      type: string
      enum:
        - APPLICATION
        - PHONE_CONTACT
        - INTERVIEW
        - OFFER
        - HIRED
        - STOP

    StopStatus:
      type: string
      enum:
        - NO_STATUS
        - DO_NOT_FIT_VALUES
        - DO_NOT_FIT_TECHNICAL_SKILLS
        - DO_NOT_ACCEPT_OFFER
        - HIS_NOT_INTERESTED_ANYMORE
        - FIND_ANOTHER_OPPORTUNITY
        - HAS_BEEN_HIRED_FOR_ANOTHER_JOB
        - RESERVE
        - OTHER
        - TO_BE_DETERMINED

    RecruitmentChannel:
      type: string
      enum:
        - WEBSITE
        - LINKEDIN
        - HUNTERZ
        - EXTERNAL_COMPANY
        - HR_EVENT
        - NRB_GROUP
        - OTHER

    Metadata:
      type: object
      properties:
        key:
          type: string
        value:
          type: string

    DataUsageCondition:
      type: object
      properties:
        id:
          $ref: 'common.yaml#/components/schemas/UUID'
        version:
          type: string
        text:
          type: string

    Resume:
      type: object
      properties:
        file:
          type: string
          format: binary

    ###############################################################################################################
    #For the pagination
    ###############################################################################################################
    QueryPage:
      type: object
      description: 'Filter the result on a given page with a given number of elements'
      required:
        - page
        - size
      properties:
        page:
          type: integer
          minimum: 0
          example: 2
          description: 'The current page number'
        size:
          type: integer
          minimum: 1
          example: 50
          description: 'The number of elements of current page'

    Pagination:
      type: object
      required:
        - page
        - size
        - totalSize
      properties:
        page:
          type: integer
          minimum: 0
          example: 2
          description: 'The current page number'
        size:
          type: integer
          minimum: 1
          example: 50
          description: 'The number of elements of current page'
        totalSize:
          type: integer
          minimum: 0
          example: 4
          description: 'The total number of elements matching the given query'

    ######################
    #Candidate pagination
    ######################
    PagedCandidateQuery:
      type: object
      required:
        - page
        - query
      properties:
        page:
          $ref: '#/components/schemas/QueryPage'
        sortField:
          $ref: '#/components/schemas/CandidateSort'
        sortDirection:
          $ref: '#/components/schemas/SortDirection'
        query:
          $ref: '#/components/schemas/CandidateQuery'

    CandidatesPage:
      type: object
      required:
        - pagination
        - candidates
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        candidates:
          type: array
          minimum: 0
          items:
            $ref: '#/components/schemas/Candidate'

    CandidateQuery:
      type: object
      properties:
        domainId:
          $ref: 'common.yaml#/components/schemas/UUID'
        categoryId:
          $ref: 'common.yaml#/components/schemas/UUID'
        seniority:
          $ref: '#/components/schemas/Seniority'
        lastName:
          type: string
        firstName:
          type: string
        showIsHired:
          type: boolean
        showIsStopped:
          type: boolean

    SortDirection:
      type: string
      enum:
        - ASC
        - DESC

    CandidateSort:
      type: string
      enum:
        - FIRST_NAME
        - LAST_NAME
        - CATEGORY
        - DOMAIN
        - SENIORITY
        - DATE

    ######################
    #Application pagination
    ######################
    PagedApplicationQuery:
      type: object
      required:
        - page
        - query
      properties:
        page:
          $ref: '#/components/schemas/QueryPage'
        query:
          $ref: '#/components/schemas/ApplicationQuery'

    ApplicationsPage:
      type: object
      required:
        - pagination
        - applications
      properties:
        pagination:
          $ref: '#/components/schemas/Pagination'
        applications:
          type: array
          minimum: 0
          items:
            $ref: '#/components/schemas/Application'

    ApplicationQuery:
      type: object
      properties:
        jobId:
          $ref: 'common.yaml#/components/schemas/UUID'
        applicationStatus:
          $ref: '#/components/schemas/ApplicationStatus'
        startDate:
          $ref: 'common.yaml#/components/schemas/Date'
        endDate:
          $ref: 'common.yaml#/components/schemas/Date'
        showIsHired:
          type: boolean
        showIsStopped:
          type: boolean
        query:
          type: string